gdb.execute("b tee_entry_std")

Usata per settare un breakpoint

-------------------------------------------

Come imposto un breakpoint su user_ta_enter?

Te lo dico io:
	(gdb) source gdb-optee.py
	(gdb) load_tee
	(gdb) b user_ta.c:user_ta_enter

Ora, come avvio l'esecuzione per far scattare questo breakpoint?
Perché se poi carichi load_host hello_world, si perde la precedente tabella e se non carichi
hello_world, non saprei come avviarla

Se modifichiamo load_host hello_world per includere questo pezzo di codice:
	gdb.execute("symbol-file {}/{}".format(OPTEE_PROJ_PATH, TEE_ELF))
			gdb.execute("b tee_entry_std")

La funzione invoke di LoadHost (N.B. LoadHost, non LoadTA, ho controllato), diventerebbe così:
	# Parte di load_tee per caricare il breakpoint in user_ta_enter
	gdb.execute("symbol-file {}/{}".format(OPTEE_PROJ_PATH, TEE_ELF))
        gdb.execute("b tee_entry_std")
	# Parte pre-esistente che carica i breakpoint della Trusted Application da eseguire
	gdb.execute("add-symbol-file {}/{} {}".format(OPTEE_PROJ_PATH, ta, TA_LOAD_ADDR))
        gdb.execute("b TA_InvokeCommandEntryPoint")


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Loading TEE core symbols for OP-TEE!
Breakpoint 1 at 0xe135866: file core/arch/arm/tee/entry_std.c, line 475.
Breakpoint 2 at 0xe100fe4: file core/arch/arm/kernel/user_ta.c, line 129.
add symbol table from file "/home/luca/Optee/out-br/build/optee_examples-1.0/hello_world/ta/out/8aaaf200-2450-11e4-abe2-0002a5d5c51b.elf" at
	.text_addr = 0x4000d020
Breakpoint 3 at 0x4001877c: file hello_world_ta.c, line 147.

D/LD:  ldelf:169 ELF (8aaaf200-2450-11e4-abe2-0002a5d5c51b) at 0x125000

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/luca/Optee/optee_os/core/tee/uuid.c
/home/luca/Optee/optee_os/core/arch/arm/kernel/user_ta.c
/home/luca/Optee/out-br/build/optee_examples-1.0/hello_world/ta/hello_world_ta.c
/home/luca/Optee/out-br/build/optee_examples-1.0/hello_world/ta/include/hello_world_ta.h
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In user_ta.h c'è la struct user_ta_ctx
kernel/user_ta.h

(gdb) b user_ta.c:138	# Prendiamo il load address del TA (da testare)
(gbd) p (uaddr_t *)&utc->entry_func 
(gdb) p (int) &utc->uctx->ctx->uuid


entry_func = D/LD + 32 (numeri interi)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~/Optee/optee_os/core/arch/arm/include/kernel/user_ta

/*
 * struct user_ta_ctx - user TA context
 * @entry_func:		Entry address in TA
 * @dump_entry_func:	Entry address in TA for dumping address mappings
 *			and stack trace
 * @ftrace_entry_func:	Entry address in ldelf for dumping ftrace data
 * @ldelf_stack_ptr:	Stack pointer used for dumping address mappings and
 *			stack trace
 * @is_32bit:		True if 32-bit TA, false if 64-bit TA
 * @is_initializing:	True if TA is not fully loaded
 * @open_sessions:	List of sessions opened by this TA
 * @cryp_states:	List of cryp states created by this TA
 * @objects:		List of storage objects opened by this TA
 * @storage_enums:	List of storage enumerators opened by this TA
 * @stack_ptr:		Stack pointer
 * @vm_info:		Virtual memory map of this context
 * @ta_time_offs:	Time reference used by the TA
 * @areas:		Memory areas registered by pager
 * @vfp:		State of VFP registers
 * @ctx:		Generic TA context
 */

 to_user_ta_ctx 

 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 ~/Optee/optee_os/ldelf/ta_elf.c 

 /home/luca/Optee/optee_os/core/arch/arm/kernel/thread.c, line 1280 for thread_enter_user_mode()

 /home/luca/Optee/optee_os/ldelf/main.c 
 /home/luca/Optee/optee_os/out/arm/ldelf/ldelf.elf

 luca@luca-X580VN:~/Optee/optee_os/out/arm/ldelf$ readelf -S ldelf.elf 